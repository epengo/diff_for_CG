digraph graphname {
rankdir="LR";
6 [label="Abstract.<init>()V"]
28 [label="Abstract.foo()V"]
7 [label="Base.<init>()V"]
24 [label="CallEdgeExamples$1.<init>(LCallEdgeExamples;)V"]
23 [label="CallEdgeExamples$1.base()V"]
44 [label="CallEdgeExamples$1Local.<init>(LCallEdgeExamples;)V"]
45 [label="CallEdgeExamples$1Local.foo()V"]
35 [label="CallEdgeExamples$2.<init>(LCallEdgeExamples;)V"]
36 [label="CallEdgeExamples$2.foo()V"]
37 [label="CallEdgeExamples$3.<init>(LCallEdgeExamples;)V"]
40 [label="CallEdgeExamples$3.generic(LChild1;)V"]
38 [label="CallEdgeExamples$3.generic(LInterface;)V"]
11 [label="CallEdgeExamples.<init>()V"]
14 [label="CallEdgeExamples.anonim()V"]
20 [label="CallEdgeExamples.contructor()V"]
17 [label="CallEdgeExamples.generic()V"]
18 [label="CallEdgeExamples.init()V"]
13 [label="CallEdgeExamples.innerClass()V"]
59 [label="CallEdgeExamples.lambda$lambda$0(II)Z"]
19 [label="CallEdgeExamples.lambda()V"]
16 [label="CallEdgeExamples.local()V"]
10 [label="CallEdgeExamples.main([Ljava/lang/String;)V"]
15 [label="CallEdgeExamples.nested()V"]
21 [label="CallEdgeExamples.overload()V"]
22 [label="CallEdgeExamples.parser()V"]
12 [label="CallEdgeExamples.polimorphic()V"]
9 [label="Child1.<init>()V"]
25 [label="Child1.foo()V"]
26 [label="Child1.goo()V"]
4 [label="Child2.<init>()V"]
29 [label="Child2.hoo()V"]
60 [label="Constructor.<init>()V"]
51 [label="ForParser.<init>()V"]
66 [label="ForParser.foo()V"]
67 [label="ForParser.goo()V"]
53 [label="ForParser.validGenericMethod(LChild2;LGeneric1;[Ljava/lang/Class;)LGeneric2;"]
52 [label="ForParser.validMethod(LChild2;LGeneric1;[Ljava/lang/Class;)LGeneric2;"]
39 [label="Generic1.<init>()V"]
46 [label="Generic1.generic(LInterface;)V"]
47 [label="Generic2.<init>()V"]
48 [label="Generic2.generic(LInterface;LGeneric1;)V"]
49 [label="Generic3.<init>()V"]
50 [label="Generic3.foo()V"]
2 [label="Helper.<init>()V"]
54 [label="Helper.genericMethod(LInterface;)V"]
3 [label="Helper.instantiateChild1()LChild1;"]
30 [label="Helper.interfaceTest(LInterface;)V"]
55 [label="Init.<init>(LInterface;)V"]
27 [label="Interface.hoo()V"]
1 [label="M.sg(Ljava/lang/String;)V"]
33 [label="Outer$Inner.<init>(LOuter;)V"]
34 [label="Outer$Inner.inner()V"]
41 [label="Outer$Nested.<init>()V"]
42 [label="Outer$Nested.nested()V"]
43 [label="Outer$Nested.staticNested()V"]
31 [label="Outer.<init>()V"]
32 [label="Outer.inner()V"]
61 [label="Overload.<init>()V"]
62 [label="Overload.foo()V"]
63 [label="Overload.foo(I)V"]
65 [label="Overload.foo(I[Ljava/lang/Object;)V"]
64 [label="Overload.foo(Ljava/lang/Object;)V"]
0 [label="StaticInit.<clinit>()V"]
56 [label="StaticInit.staticInit()V"]
5 [label="java.io.PrintStream.println(Ljava/lang/String;)V"]
8 [label="java.lang.Object.<init>()V"]
57 [label="java.lang.invoke.LambdaMetafactory.compare$CallEdgeExamples$0()LLambda;"]
58 [label="wala.lambda$CallEdgeExamples$0.compare(II)Z"]
0 -> 1
0 -> 2
0 -> 3
0 -> 4
1 -> 5
2 -> 8
3 -> 1
3 -> 9
4 -> 6
6 -> 7
7 -> 8
9 -> 6
10 -> 11
10 -> 12
10 -> 13
10 -> 14
10 -> 15
10 -> 16
10 -> 17
10 -> 18
10 -> 19
10 -> 20
10 -> 21
10 -> 22
10 -> 23
11 -> 8
11 -> 24
12 -> 1
12 -> 2
12 -> 4
12 -> 9
12 -> 25
12 -> 26
12 -> 27
12 -> 28
12 -> 29
12 -> 30
13 -> 1
13 -> 31
13 -> 32
14 -> 1
14 -> 26
14 -> 35
14 -> 36
14 -> 37
14 -> 38
15 -> 1
15 -> 41
15 -> 42
15 -> 43
16 -> 1
16 -> 44
16 -> 45
17 -> 1
17 -> 2
17 -> 4
17 -> 9
17 -> 39
17 -> 46
17 -> 47
17 -> 48
17 -> 49
17 -> 50
17 -> 51
17 -> 52
17 -> 53
17 -> 54
18 -> 1
18 -> 9
18 -> 55
18 -> 56
19 -> 1
19 -> 57
19 -> 58
20 -> 1
20 -> 60
21 -> 1
21 -> 61
21 -> 62
21 -> 63
21 -> 64
21 -> 65
22 -> 1
22 -> 51
22 -> 66
22 -> 67
23 -> 1
24 -> 7
25 -> 1
26 -> 1
27 -> 1
28 -> 1
29 -> 1
30 -> 1
30 -> 25
31 -> 8
32 -> 1
32 -> 33
32 -> 34
33 -> 8
34 -> 1
35 -> 9
36 -> 1
37 -> 39
38 -> 40
39 -> 8
40 -> 1
40 -> 36
41 -> 8
42 -> 1
43 -> 1
44 -> 8
45 -> 1
46 -> 1
46 -> 25
46 -> 28
47 -> 8
48 -> 1
48 -> 28
48 -> 46
49 -> 39
50 -> 1
50 -> 9
50 -> 46
51 -> 8
52 -> 1
52 -> 47
52 -> 48
53 -> 1
53 -> 39
53 -> 47
53 -> 48
54 -> 1
54 -> 28
55 -> 1
55 -> 2
55 -> 3
55 -> 4
55 -> 8
55 -> 9
56 -> 1
58 -> 59
59 -> 1
60 -> 1
60 -> 8
61 -> 8
62 -> 1
63 -> 1
64 -> 1
65 -> 1
66 -> 1
67 -> 1
}
